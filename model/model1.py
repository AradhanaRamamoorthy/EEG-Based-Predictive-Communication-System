# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f9PLYaSsomhuVPQIXTp3k-Uj5h-OaJH_
"""

import numpy as np
import torch
import os
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
from google.colab import drive
import json  # Add this line to import the json module

# Mount Google Drive
drive.mount('/content/drive')

data_path = "/content/drive/MyDrive/Data/"

# Load data
train_data = np.load(data_path + 'train_data.npy')
test_data = np.load(data_path + 'test_data.npy')
train_label = np.load(data_path + 'train_label.npy')
test_label = np.load(data_path + 'test_label.npy')

# Convert data to PyTorch tensors
x_train_tensor = torch.Tensor(train_data)
y_train_tensor = torch.LongTensor(train_label)
x_test_tensor = torch.Tensor(test_data)
y_test_tensor = torch.LongTensor(test_label)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")  # Use GPU if available

# Create data loaders
train_dataset = TensorDataset(x_train_tensor.to(device), y_train_tensor.to(device))
train_loader = DataLoader(train_dataset, batch_size=64, drop_last=True, shuffle=True)
test_dataset = TensorDataset(x_test_tensor.to(device), y_test_tensor.to(device))
test_loader = DataLoader(test_dataset, batch_size=64, drop_last=True, shuffle=False)

# Define model
class ComplexEEGClassifier(nn.Module):
    def __init__(self, num_classes):
        super(ComplexEEGClassifier, self).__init__()
        self.encoder = nn.Sequential(
            nn.Linear(64 * 795, 1024),
            nn.ReLU(),
            nn.Linear(1024, 512),
            nn.ReLU(),
            nn.Linear(512, 256),
            nn.ReLU(),
            nn.Linear(256, 128),
            nn.ReLU()
        )
        self.classifier = nn.Sequential(
            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Linear(64, num_classes),
            nn.LogSoftmax(dim=1)
        )
        self.dropout = nn.Dropout(0.5)

    def forward(self, x):
        x = x.view(x.size(0), -1)
        x = self.encoder(x)
        x = self.dropout(x)
        x = self.classifier(x)
        return x

# Define classes
classes = ["hello", "help me", "stop", "thank you", "yes"]

# Initialize model, criterion, and optimizer
num_classes = len(classes)
model = ComplexEEGClassifier(num_classes).to(device)
criterion = nn.NLLLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Training loop
num_epochs = 523
best_accuracy = 0  # Track the best accuracy
predicted_signals = []  # Initialize predicted_signals
for epoch in range(num_epochs):
    model.train()
    epoch_loss = 0.0
    for data, labels in train_loader:
        optimizer.zero_grad()
        outputs = model(data)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        epoch_loss += loss.item()

    # Print current epoch and loss
    print(f'Epoch {epoch + 1}/{num_epochs}, Loss: {epoch_loss}')

# Evaluate model after all epochs
model.eval()
correct = 0
total = 0
with torch.no_grad():
    for data, labels in test_loader:
        outputs = model(data)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()
        predicted_signals.extend([classes[pred_class.item()] for pred_class in predicted])

# Save predicted signals to JSON files
output_dir = "/content/drive/MyDrive/JSON/"
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

for class_name in classes:
    class_file_name = f'{class_name.replace(" ", "")}.json'
    class_signals = [signal for signal, true_class, pred_class in zip(predicted_signals, test_label, predicted) if classes[true_class.item()] == class_name]
    json_data = {'predicted_signals': class_signals}
    with open(os.path.join(output_dir, class_file_name), 'w') as f:
        json.dump(json_data, f)

    print(f'Saved predicted signals to {class_file_name}')

# Calculate accuracy
accuracy = correct / total * 100

# Save model if accuracy improved
if accuracy > best_accuracy:
    best_accuracy = accuracy
    torch.save(model.state_dict(), 'best_model.pth')

# Calculate and print the final accuracy
final_accuracy = correct / total * 100
print(f'Final Test Accuracy: {final_accuracy:.2f}%')